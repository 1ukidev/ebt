#!/usr/bin/bash

# ebt - easy backup tool
# made by 1ukidev
# license: GNU GPL v2.0

clear

# Color variables.

RED='\033[0;31m'
NC='\033[0m'

# First content for ebt-log.

function logBoot()
{
if [ -s ebt-log ]
then
    echo "-----------------------------" >> ebt-log
else
    printf "" >> ebt-log
fi

date "+Date: %d-%m-%y Time: %H-%M-%S" >> ebt-log
}

# Checks whether dependencies are installed.

function checkDependencies()
{
if command -v tar > /dev/null; then
    printf "tar ok\n" >> ebt-log
else
    printf "\n${RED}tar is not installed 😟\n\n"
    printf "tar fail\n" >> ebt-log
    exit 1
fi

if command -v zstd > /dev/null; then
    printf "zstd ok\n" >> ebt-log
else
    printf "\n${RED}zstd is not installed 😟\n\n"
    printf "zstd fail\n" >> ebt-log
    exit 1
fi

if command -v drive > /dev/null; then
    printf "drive ok\n" >> ebt-log
else
    printf "\n${RED}drive is not installed 😟\n\n"
    printf "drive fail\n" >> ebt-log
    exit 1
fi
}

# Welcome.

function welcome()
{
printf "Welcome to ${RED}ebt${NC}, easy backup tool!\n"
printf "A simple shell script for backup. Speeds up backup process by compressing your directory or file and uploading to Google Drive.\n\n"
printf "More information: https://github.com/1ukidev/ebt\n"
printf "drive: https://github.com/odeke-em/drive\n\n"
printf "${RED}WARNING: If you have never used drive, configure it before use to avoid errors.${NC}\n"
printf "Enter path of the file or directory you want to backup:\n"
printf "Example: /home/user/Music (for directory) or /home/user/Music/Jazz.mp3 (for file).\n"
IFS= read -rp "❯❯ " path
printf "Enter the name you want to put in the compressed file (tip: $(date "+%d-%m-%y")).\n"
IFS= read -rp "❯❯ " name
}

function backup()
{

# Directory compression.

if [[ -d $path ]]; then
    printf "Starting directory compression...\n"
    {
      tar -I 'zstd -15 -T$(nproc)' -cf "$name".tar.zst $path/
    } &> /dev/null
    if [ $? -eq 0 ]; then
        printf "Done.\n"
    else
        printf "${RED}Compress failed 😟\nTry to update your system or create an issue at: https://github.com/1ukidev/ebt\n"
        printf "Compress failed, try to update your system or create an issue at: https://github.com/1ukidev/ebt\n" >> ebt-log
        exit 1
    fi
        printf "Uploading...\n"
        drive push -quiet "$name".tar.zst
    if [ $? -eq 0 ]; then
        rm -Rf "$name".tar.zst
        printf "Deleted compressed directory.\n"
        printf "Deleted compressed directory.\n" >> ebt-log
        printf "All right, closing...\n"
        printf "All right, closing...\n" >> ebt-log
        printf "Finished in $SECONDS seconds.\n"
        printf "Finished in $SECONDS seconds.\n" >> ebt-log
    else
        printf "${RED}Upload failed 😟\nCheck if everything is right with your drive tool.\n"
        printf "Upload failed, check if everything is right with your drive tool.\n" >> ebt-log
    fi

# File compression.

elif [[ -f $path ]]; then
    printf "Starting file compression...\n"
    {
      tar -I 'zstd -15 -T$(nproc)' -cf "$name".tar.zst $path/
    } &> /dev/null
    if [ $? -eq 0 ]; then
        printf "Done.\n"
    else
        printf "${RED}Compress failed 😟\nTry to update your system or create an issue at: https://github.com/1ukidev/ebt\n"
        printf "Compress failed, try to update your system or create an issue at: https://github.com/1ukidev/ebt\n" >> ebt-log
        exit 1
    fi
        printf "Uploading...\n"
        drive push -quiet "$name".tar.zst
    if [ $? -eq 0 ]; then
        rm -Rf "$name".tar.zst
        printf "Deleted compressed file.\n"
        printf "Deleted compressed file.\n" >> ebt-log
        printf "All right, closing...\n"
        printf "All right, closing...\n" >> ebt-log
        printf "Finished in $SECONDS seconds.\n"
        printf "Finished in $SECONDS seconds.\n" >> ebt-log
    else
        printf "${RED}Upload failed 😟\nCheck if everything is right with your drive tool.\n"
        printf "Upload failed, check if everything is right with your drive tool.\n" >> ebt-log
    fi
else
    printf "${RED}$path is not valid.\n"
    printf "$path is not valid.\n" >> ebt-log
    exit 1
fi
}

logBoot
checkDependencies
welcome
# Runtime.
SECONDS=0
backup
